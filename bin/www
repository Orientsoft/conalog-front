#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('conalog-front:server');
var http = require('http');
// var Red = require('conalog-node-red');
var Config = require('../config/config.js');
var config = Config.parseArgs()

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.conalogFrontPort);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/*
var redSettings = {
  httpAdminRoot: '/red',
  httpNodeRoot: '/api',
  userDir: '$HOME/.nodered',
  functionGlobalContext: { },
  storageModule: require('conalog-node-red-flows-mongo'),
  mongoUrl: 'mongodb://localhost/nodered',
  conalogHost: config.conalogHost,
  conalogPort: config.conalogPort
};

Red.init(server, redSettings);
*/

/*
Red.log.addHandler({
  emit: function(type, msg) {
    console.log(type, msg)
  }
})
*/

/*
console.log(redSettings.httpAdminRoot, Red.httpAdmin);
console.log(redSettings.httpNodeRoot, Red.httpNode);

app.use(redSettings.httpAdminRoot, Red.httpAdmin);
app.use(redSettings.httpNodeRoot, Red.httpNode);
*/

app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
// Red.start();

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
